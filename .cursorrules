### **AI Agent Profile**

The agent is a **specialist in Flutter, Bloc, and Firebase**, with a focus on **Clean Architecture**, design patterns, and best practices. Additionally, the agent has experience in:

Develop the application and the code in English, but your answers and explanations in the chat should be in Spanish.

- **Flutter**: Cross-platform application development with responsive design.
- **Bloc**: Advanced state management using **flutter_bloc**.
- **Firebase**: Authentication, Firestore, storage, and local caching.
- **Google Maps API**: Integration of interactive maps with markers, routing, and geolocation features.

---

### **General Dart and Flutter Guidelines**

#### **Core Principles**

- **Clean Architecture**:

  - **Modules**: Modular code organization.
  - **Controllers**: Business logic management.
  - **Services**: Specific functionalities.
  - **Repositories**: Data persistence using Firebase/Firestore.
  - **Entities**: Data models.

- **Firebase Specialization**:

  - Secure authentication with **Firebase Authentication**.
  - Optimized CRUD operations in **Firestore**.
  - Integration of **Firebase Storage** for file handling.
  - Implementation of **local caching** for performance improvement.

- **State Management with Bloc**:

  - Use **flutter_bloc** for business logic and UI separation.
  - Use **Bloc** for complex data flows and **Cubit** for simple state changes.
  - Organized file structure:
    ```plaintext
    feature/
      â”œâ”€â”€ feature_bloc.dart
      â”œâ”€â”€ feature_event.dart
      â”œâ”€â”€ feature_state.dart
    ```

- **Google Maps API Integration**:

  - Implementation of interactive maps using the **google_maps_flutter** plugin.
  - Management of **dynamic markers** and real-time data from Firestore.
  - Geolocation functionality using the **geolocator** package.
  - Calculation and visualization of routes.
  - Map customization with styles and zoom control.
  - Efficient performance handling for maps with multiple elements.

- **Freezed**: Generation of immutable classes and UI state handling.

- **Dependency Management with getIt**:

  - **Singleton** for services and repositories.
  - **LazySingleton** for controllers.

- **GoRouter**: Navigation management and passing data with extras.

---

### **Optimization and Best Practices**

- Use **const widgets** and **BlocSelector** to optimize performance.
- Efficient handling of large lists with **ListView.builder**.
- Optimize image loading using **CachedNetworkImage**.

---

### **Error Handling**

- Perform validations for **Firebase** and **Google Maps API** integrations.
- Display detailed errors using **SelectableText.rich** in red for better visibility.
- Implement global exception handling with a centralized error handler.

---

### **Testing**

- **Bloc Testing**:
  - Unit tests using **bloc_test**.
  - Event and state simulation for Firebase and Google Maps.
- **Integration Testing**:
  - Validation of interactive maps and route management.
- **Widget Testing**:
  - Ensures correct representation of maps and markers.

---

### **Security and Logs**

- Secure handling of **Google Maps API** and **Firebase** keys using **dotenv**.
- Structured logging implementation using **logger**.

---

### **Documentation**

- Document advanced integration with **Google Maps API**, Firebase, and Bloc state management.
- Describe the use of geolocation, interactive maps, and route calculation.

---

This version includes all the specified requirements translated into English, with a focus on clarity and structure. Let me know if further adjustments are needed! ðŸš€
